[include]
  path = ~/.private/git/config
[user]
  name = Nathanial L. McConnell
  email = fluxaugur@gmail.com
[apply]
  whitespace = nowarn
[branch]
  autoSetupMerge = true
[color]
  branch = auto
  diff = auto
  interactive = auto
  status = auto
  ui = true
[color "branch"]
  current = yello reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
  plain = white bold
[color "status"]
  added = yellow
  changed = green
  untracked = red
[core]
  editor = nvim -c 'put_' -c 'startinsert'
  excludesfile = $HOME/.config/git/ignore
  pager = less -x 4
  quotepath = false
  whitespace = fix
[credential]
  helper = osxkeychain
[diff]
  mnemonicprefix = true
  tool = meld
[difftool]
  prompt = false
[filter "lfs"]
  clean = git-lfs clean %f
  smudge = git-lfs cmudge %f
  required = true
[merge]
  conflictstyle = diff3
  tool = meld
[mergetool]
  keepBackup = false
  prompt = false
[mergetool "diffmerge"]
  cmd = diffmerge --merge --result=$MERGED $LOCAL $BASE $REMOTE
  trustExitCode = true
[pull]
  default = current
[push]
  default = current
[rebase]
  autosquash = true
[rerere]
  enabled = false
[url "https://github.com/"]
  insteadOf = gh:
[url "https://gist.github.com/"]
  insteadOf = gist:
[url "https://bitbucket.org/"]
  insteadOf = bb:

[alias]
  ad = add
  ai = add --interactive
  amend = commit --amend
  assume = update-index --assume-unchanged
  assumeall = "!git status -s | awk { 'print $2' } | xargs git assume"
  assumed = "!git ls-files -v | grep ^h | cut -c 3-"
  br = branch
  branch = branch -ra
  ca = commit --amend
  caa = commit -a --amend -C HEAD
  ci = commit
  cl = clone
  cleanup = !git branch | grep -E '^[^*]' | xargs git branch -d
  cm = commit -m
  cma = commit -a -m
  co = checkout
  cp = cherry-pick
  d = diff --word-diff
  dc = diff --cached
  diff = diff --word-diff
  diffr = "!f() { git diff "$1"^.."$1"; }; f"
  dlc = diff --cached HEAD^
  done = "!f() { git branch | grep "$1" | cut -c 3- | grep -v done | xargs -I{} git branch -m {} done-{}; }; f"
  dr = "!f() { git diff -w "$1"^.."$1"; }; f"
  edit = commit --amend --edit
  empty = "!git commit -am\"[empty] Initial commit\" --allow-empty"
  f = "!git ls-files | grep -i"
  filelog = log -u
  fl = log -u
  g = grep -n
  gr = grep
  gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"
  grep = grep -Ii
  l = log --decorate --graph --oneline
  la = "!git config -l | grep alias | cut -c 7-"
  lap = "!f() { git --git-dir=$1 format-patch -k -1 --stdout $2 | git am -3 -k; }; f"
  last = "!gvim $(git show HEAD --format="" --name-only | grep -e .*md$ | xargs)"
  lastlog = log -1 HEAD --decorate
  lasttag = describe --tags --abbrev=0
  lc = "!f() { git ll "$1"^.."$1"; }; f"
  ld = log --decorate --graph --format='%C(blue)%ad%Creset %C(yellow)%h%Creset%C(green)%d%Creset %s [%an]'
  ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
  lnc = log --pretty=format:"%h\\ %s\\ [%cn]"
  lo = log --oneline -n 15
  ls = log --pretty=format:"%C(green)%h\\ %C(yellow)[%ad]%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
  lt = describe --tags --abbrev=0
  ours = "!f() { git co --ours $@ && git add $@; }; f"
  pull = pull --rebase
  newmd = "!gvim $(git status -s | awk { 'print $2' })"
  r = reset
  r1 = reset HEAD^
  r2 = reset HEAD^^
  ra = "!f() { git remote add $1 https://bitbucket.org/$2.git; }; f"
  rem = "!git config -l | grep remote.*url | tail -n +2"
  revise = commit --amend -aC HEAD
  rh = reset --hard
  rh1 = reset HEAD^ --hard
  rh2 = reset HEAD^^ --hard
  sa = stash apply
  sba = "!f() { git subtree add --prefix $2 $1 master --squash; }; f"
  sbu = "!f() { git subtree pull --prefix $2 $1 master --squash; }; f"
  serve = "!git daemon --verbose --reuseaddr --export-all --strict-paths --base-path=.git .git/"
  sl = stash list
  ss = stash save
  st = status
  status = status -s
  svnd = svn dcommit
  svnl = svn log --oneline --show-commit
  svnr = svn
  theirs = "!f() { git co --theirs $@ && git add $@; }; f"
  unassume = update-index --no-assume-unchanged
  unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"
  undo = "!f() { git reset --hard $(git rev-parse --abbrev-ref HEAD)@{${1-1}}; }; f"
  up = pull --rebase
  unstage = reset HEAD --
  wl = worktree list
